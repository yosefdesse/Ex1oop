package Ex1;

import java.io.*;
import java.util.*;

public class WGraph_Algo implements weighted_graph_algorithms{
	 private static Random _rnd = null;

	weighted_graph graph;
	@Override
	public void init(weighted_graph g) {
		this.graph=g;		
		
	}

	@Override
	public weighted_graph getGraph() {
		return this.graph;
	}

	@Override
	public weighted_graph copy() {
		 weighted_graph ga = new WGraph_DS();	
		 //copy all the nodes in to the new graph
		 for (node_info courent : this.graph.getV()) {
			 ga.addNode(courent.getKey());
		}
		 // copy all the edges in to the new graph
		 for (node_info courent : graph.getV()) {
			 for (node_info runner : this.graph.getV(courent.getKey())) {
				 if(this.graph.hasEdge(courent.getKey(), runner.getKey())==true) {
				 ga.connect(courent.getKey(),runner.getKey(), this.graph.getEdge(courent.getKey(), runner.getKey()));
				 }  
			 }
		 }
		return ga;		
	}

	@Override
	public boolean isConnected() {

		if(this.graph.nodeSize()==0) {
			return true;
		}
		int key=0;
		//Get a random node from the graph.
		for (node_info courent : this.graph.getV()) {
				 key=courent.getKey();
				 break;
			}
		// Mark all the vertices as white.
		for ( node_info courent :  this.graph.getV()) {
			courent.setInfo("WHITE");
		}
		//Mark the node as gray
		this.graph.getNode(key).setInfo("GRAY");
        //Create a new queue.
		Queue<node_info> q = new LinkedList<node_info>();
		q.add(graph.getNode(key));
		while (!q.isEmpty()) {
			// Dequeue a vertex from queue .
			node_info u = q.poll();
			//Get all adjacent nodes of the dequeued vertex u
			//Mark theme as gray.
			//visited and enqueue it
			for (node_info v : graph.getV(u.getKey())) {
				if(v.getInfo() == "WHITE"){
					v.setInfo("GRAY");
					q.add(v);
				}
			}
			//Mark node u as black
			u.setInfo("BLACK");

		}
//		Check if there node that we not mark him as black then return false/
		for ( node_info c :  this.graph.getV()) {
			if(c.getInfo()=="WHITE") return false;

		}
		return true;
	}

	@Override
	public double shortestPathDist(int src, int dest) {
		node_info a ,b;
		a=this.graph.getNode(src);
		b=this.graph.getNode(dest);
		if((a==null)||(b==null)) {
			return -1;
		}
		// PriorityQueue the gives a priority to the lower tag to be first 
		//compare override function
		Queue<node_info> q = new PriorityQueue<node_info>(new Comparator<node_info>() {
			@Override
			public int compare(node_info a, node_info b) {
				// compare if the tag is smaller he will get much more priority
				if (a.getTag() < b.getTag()) {
					return -1;
				}
				else if (a.getTag() > b.getTag()) {
					return 1;
				}
				return 0;
			}
		});
		node_info s = this.graph.getNode(src);
		HashMap<Integer, Double> d = new HashMap<>(); // save the dis of all the nodes
		HashMap<Integer, node_info> p = new HashMap<>();// save all the Parent of all the nodes
		initDijkstra(d,q);

		d.replace(s.getKey(), 0.0);
		p.put(s.getKey(), null);
		s.setTag(0);
		while (q.size() != 0) {
			// remove a vertex from queue
			s = q.poll();
			// Get all adjacent vertices of the dequeued vertex s
			node_info temp = s;
			if(this.graph.getV(temp.getKey())==null){
				continue;
			}
			//Running on all the edges of the current node  
				for (node_info courent : this.graph.getV(s.getKey())) {
					//Checking if the wight of the node + the edge wight from the node to is neighbor is smaller
					// If so replace the wight and put in the Hashmap d
					double dis = d.get(s.getKey()) + this.graph.getEdge(s.getKey(), courent.getKey());
				if(dis<d.get(courent.getKey())){
					courent.setTag(dis);
					d.put(courent.getKey(), dis);
					p.put(courent.getKey(), s);
					q.add(courent);
			}
		}
		
		}
		//Return the shortestPathDis
		return d.get(dest);

	}
	
    //init all the nodes tag and insert to the queue
	void initDijkstra(HashMap a ,Queue b){
        for (node_info curr : this.graph.getV()) { 
            curr.setTag(Double.MAX_VALUE);
            a.put(curr.getKey(), Double.MAX_VALUE);
            b.add(curr);
        }
    }
	
	@Override
	public List<node_info> shortestPath(int src, int dest) {

		node_info a ,b;
		a=this.graph.getNode(src);
		b=this.graph.getNode(dest);
		if((a==null)||(b==null)) {
			return null;
		}
		// PriorityQueue the gives a priority to the lower tag to be first 
		Queue<node_info> q = new PriorityQueue<node_info>(new Comparator<node_info>() {
			@Override
			public int compare(node_info a, node_info b) {
				//Compare if the tag is smaller he will get much more priority
				if (a.getTag() < b.getTag()) {
					return -1;
				}
				else if (a.getTag() > b.getTag()) {
					return 1;
				}
				return 0;
			}
		});
		node_info s = this.graph.getNode(src);
		HashMap<Integer, Double> d = new HashMap<>(); // Save the distance of all the nodes
		HashMap<Integer, node_info> p = new HashMap<>();// Save all the Parent of all the nodes

		initDijkstra(d,q);
		d.replace(s.getKey(), 0.0);
		p.put(s.getKey(), null);
		s.setTag(0);
		while (q.size() != 0) {
			// Remove a vertex from queue
			s = q.poll();
			// Get all adjacent vertices of the dequeued vertex s
			node_info temp = s;
				if(this.graph.getV(temp.getKey())==null){
					continue;
				}
				//Running on all the edges of the current node  
				for (node_info courent : this.graph.getV(s.getKey())) {
				//Checking if the wight of the node + the edge wight from the node to is neighbor is smaller
				// If so replace the wight and put in the Hashmap d
				double dis = d.get(s.getKey()) + this.graph.getEdge(s.getKey(), courent.getKey());
				if(dis<d.get(courent.getKey())){
					courent.setTag(dis);
					d.put(courent.getKey(), dis);
					p.put(courent.getKey(), s);
					q.add(courent);
				}
			}
		}
		LinkedList<node_info> list = new LinkedList<node_info>();//the list to return
		//Add into new list the shortest Path between src to dest
		node_info courent =this.graph.getNode(dest);
		while(courent!=null){
			list.addFirst(this.graph.getNode(courent.getKey()));
			courent = p.get(courent.getKey());
		}
		return list;



	}

	@Override
	public boolean save(String file) {
	     //Create a new file and write the graph in to 
        try {
            FileOutputStream fileOut = new FileOutputStream(file);
            ObjectOutputStream objectOut = new ObjectOutputStream(fileOut);
            objectOut.writeObject(getGraph());
            fileOut.close();
            objectOut.close();
            System.out.println("This object has been serialized");
        }
        catch (IOException e){
            System.out.println("IOException has been caught");
            return false;
        }
        return true;
	}

	@Override
	public boolean load(String file) {
	    //Load the graph from the given file
        try {
            FileInputStream fileIn = new FileInputStream(file);
            ObjectInputStream objectIn = new ObjectInputStream(fileIn);
            this.graph= (weighted_graph) objectIn.readObject();
            fileIn.close();
            objectIn.close();
        }
        catch (Exception e){
            e.printStackTrace();
            return false;
        }
        return true;		
	}
	
	
}
