

import Ex1.*;

import static org.junit.Assert.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

import java.util.Arrays;
import java.util.Collection;
import java.util.Random;

import org.junit.Test;

class WGraph_AlgoTest {

	 private static Random _rnd = null;

	    private weighted_graph g= new WGraph_DS();

	    @Test
	    void copy() {
	        g= graph_creator(8,16,2);
	        weighted_graph_algorithms graph1 = new WGraph_Algo();
	        weighted_graph_algorithms graph2 = new WGraph_Algo();
	        graph1.init(g);
	        graph2.init(graph1.copy());
	        assertEquals(graph1.getGraph().nodeSize(),graph2.getGraph().nodeSize());
	        assertEquals(graph1.getGraph().edgeSize(),graph2.getGraph().edgeSize());
	       

	    }
	    
	    @Test
	  void isConnected() {
	        g= graph_creator(10,20,2);
	        weighted_graph_algorithms graph1 = new WGraph_Algo();
	        graph1.init(g);
	        assertEquals(graph1.isConnected(),true);
	        graph1.getGraph().removeNode(1);
	        assertEquals(graph1.isConnected(),true);
	        graph1.getGraph().removeNode(0);
	        assertEquals(graph1.isConnected(),false);
	       

	    }
	    
	   @Test
	   void shortestPath() {
	        g= graph_creator(8,16,2);
	        weighted_graph_algorithms graph1  = new WGraph_Algo();
	        graph1.init(g);
	        String s="";
	        for(node_info curr:graph1.shortestPath(0,1) ){
	             s+=curr.getKey() +"->";
	        }
			

			assertEquals("0->4->1->",s);
	    }


	    public static weighted_graph graph_creator(int v_size, int e_size, int seed) {
	        weighted_graph g = new WGraph_DS();
	        _rnd = new Random(seed);
	        for(int i=0;i<v_size;i++) {
	            node_info n = new WGraph_DS().Node_info();
	            g.addNode(n.getKey());
	        }
	        int[] nodes = nodes(g);
	        while(g.edgeSize() < e_size) {
	            int a = nextRnd(0,v_size);
	            int b = nextRnd(0,v_size);
	            int c = _rnd.nextInt(10);
	            int i = nodes[a];
	            int j = nodes[b];
	            g.connect(i,j,c);
	        }
	        return g;
	    }
	    private static int[] nodes(weighted_graph g) {
	        int size = g.nodeSize();
	        Collection<node_info> V = g.getV();
	        node_info[] nodes = new node_info[size];
	        V.toArray(nodes); // O(n) operation
	        int[] ans = new int[size];
	        for(int i=0;i<size;i++) {ans[i] = nodes[i].getKey();}
	        Arrays.sort(ans);
	        return ans;
	    }
	    private static int nextRnd(int min, int max) {
	        double v = nextRnd(0.0+min, (double)max);
	        int ans = (int)v;
	        return ans;
	    }
	    private static double nextRnd(double min, double max) {
	        double d = _rnd.nextDouble();
	        double dx = max-min;
	        double ans = d*dx+min;
	        return ans;
	    }




}
