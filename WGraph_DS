package Ex1;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;

public class WGraph_DS implements weighted_graph {
	static int n=0;
	static int size=0;
	private HashMap<Integer,node_info> Graph;
    private HashMap<Integer,HashMap<Integer,Double>>Edges;
	private int node_id;
	private int count=0;
	private int MC=0;


	public WGraph_DS() {
		Graph=new HashMap<Integer, node_info>();
		Edges=new HashMap<Integer,HashMap<Integer,Double>>();
	}
	
	@Override
	public node_info getNode(int key) {
		
		if(this.Graph.containsKey(key)){
		return Graph.get(key);
		}
		return null;
	}
	
	public boolean hasEdge(int node1, int node2) {
		if(this.getNode(node1)==null||this.getNode(node2)==null) {
			return false;
		}
		if(this.Edges.get(node1)==null||this.Edges.get(node2)==null) {
			return false;
		}
		//Check if Graph contain node1 and node2 .
		//Check if Edges contain node1 and node2 .
		//If they do return true.
		if(this.Graph.containsKey(node1)&&this.Graph.containsKey(node2)) {
			if(this.Edges.get(node1).containsKey(node2)&&this.Edges.get(node2).containsKey(node1)) {
				return true;
			}
		}
		return false;
}

	@Override
	public double getEdge(int node1, int node2) {
		if(this.hasEdge(node1 , node2)==true) {
			return this.Edges.get(node1).get(node2);
		}
		
		return -1;
	}
	
	@Override
	public void addNode(int key) {
		node_info temp =this.Node_info(key);
		//If Graph do not contain Key, add Key as a new node.
		if(this.Graph.get(key)==null) {
			this.Graph.put(key, temp);
		}
		MC++;
	}	

	@Override
	public void connect(int node1, int node2, double w) {
		if(Graph.get(node1)==null||this.Graph.get(node2)==null) {
			return ;
		}
		//Update the wight of the two given nodes.
		if(this.hasEdge(node1 , node2)==true) {
			this.Edges.get(node1).replace(node2, w);
			this.Edges.get(node2).replace(node1, w);
			MC++;
			return;		 
		}
        //connect between the two given nodes .
		else {

			HashMap<Integer,Double> hash1 = new HashMap<>();
			hash1.put(node1,w);
			HashMap<Integer,Double> hash2 = new HashMap<>();
			hash2.put(node2,w);
			if(this.Edges.containsKey(node2)){
				this.Edges.get(node2).put(node1,w);
				if(!this.Edges.containsKey(node1)){
					this.Edges.put(node1, hash2);
				}
			}
			if(this.Edges.containsKey(node1)) {
				this.Edges.get(node1).put(node2, w);
				if(!this.Edges.containsKey(node2)){
					this.Edges.put(node2, hash1);
				}
			}else {
				this.Edges.put(node2, hash1);
				this.Edges.put(node1, hash2);
			}
			
			size++;
		}
		MC++;
	}

	@Override
	public Collection<node_info> getV() {
		return this.Graph.values();
	}

	@Override
	public Collection<node_info> getV(int node_id) {
		if(!this.Edges.containsKey(node_id))return null;
		if(this.Graph.size()==0) return null;
		if(this.Graph.containsKey(node_id)==false) return null;
		List<node_info> list= new ArrayList<>();
		//Create a list and add all node_id neighbors into.
		for(Integer h : this.Edges.get(node_id).keySet()){
			list.add(getNode(h));
		}
		return list;

	}

	@Override
	public node_info removeNode(int key) {
		node_info info =this.Graph.get(key);
		//Remove all edges of the given Key.
		for (int  cournt  : this.Edges.get(key).keySet()) {
			this.Edges.get(cournt).remove(key);
				size--;
			
		}
		this.Edges.remove(key);
		//remove node from the Graph
		this.Graph.remove(key);
		MC--;
		return info;
	}

	@Override
	public void removeEdge(int node1, int node2) {
		//check if Edges do not contains node1 and node2 remove the edge between them.
		if(this.Edges.containsKey(node1) && this.Edges.containsKey(node2)) {
			this.Edges.get(node1).remove(node2)	;
			this.Edges.get(node2).remove(node1)	;
			size--;
			MC--;
		}
	}

	@Override
	public int nodeSize() {
		return this.Graph.size();
	}

	@Override
	public int edgeSize() {
		return size;
	}

	@Override
	public int getMC() {
		return MC;
	}	
	
	public node_info Node_info() {
		node_info n =new Node();
		return n;
	}
	public node_info Node_info(int Key) {
		node_info n =new Node(Key);
		return n;
	}
	public class Node implements node_info,Serializable{
		private int Key;
		private double Tag;
		private String Info;

		// Create a new Node.
		public Node() {
			this.Key=n++;
		
		}
		
		// Create a new Node by given key.
		public Node(int Key) {
			this.Key=Key;
		
		}
		
		
		@Override
		public int getKey() {
			return this.Key;
		}

		@Override
		public String getInfo() {
			return this.Info;
		}

		@Override
		public void setInfo(String s) {
			this.Info=s;			
		}

		@Override
		public double getTag() {
			return this.Tag;
		}

		@Override
		public void setTag(double t) {
			this.Tag =t;
		}
	}


}
