package Test.Ex1;

import Ex1.WGraph_DS;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class WGraph_DSTest {
	WGraph_DS g = new WGraph_DS();


	  @Test
	    void getNode() {
	        g.addNode(1);
	        g.addNode(2);
	        int x =g.getNode(1).getKey();
	        assertEquals(1,x);
		  int y =g.getNode(2).getKey();
		  assertEquals(2,y);

	  }

	    @Test
	    void hasEdge() {
	        g.addNode(1);
	        g.addNode(2);
	        assertEquals(false,g.hasEdge(1,2));
	        g.connect(1,2,0.5);
	        assertEquals(true,g.hasEdge(1,2));

	    }

	    @Test
	    void getEdge() {
	        g.addNode(0);
	        g.addNode(1);
	        g.addNode(2);
	        g.connect(0,1,3);
	        g.connect(0,2,17);
	        assertEquals(3,g.getEdge(0,1));
	        assertEquals(17,g.getEdge(0,2));

	    }

	    @Test
	    void addNode() {
	        g.addNode(0);
	        g.addNode(1);
	        g.addNode(2);
			g.addNode(3);
			g.addNode(4);
			g.addNode(5);
			assertEquals(g.nodeSize(),6);

		}

	    @Test
	    void connect() {
	        g.addNode(0);
	        g.addNode(1);
	        g.addNode(2);
			g.addNode(3);
			g.connect(0,1,7);
	        g.connect(1,2,2);
	        g.connect(0,3,6);
	        g.connect(0,7,6);
	        assertEquals(true,g.hasEdge(0,1));
	        assertEquals(true,g.hasEdge(1,2));
	        assertNotEquals(true,g.hasEdge(0,2));
	        assertEquals(false,g.hasEdge(0,7));

	    }

	    @Test
	    void getV() {
	        g.addNode(0);
	        g.addNode(1);
	        g.addNode(2);
			g.addNode(3);
			g.addNode(4);
			g.addNode(5);
			g.connect(0,1,7);
	        g.connect(1,2,2);
	        g.connect(0,3,6);
	        int u =g.getV().size();
	        assertNotEquals(3,u);
			assertEquals(6,u);

			assertEquals(true,g.hasEdge(0,1));
	        assertEquals(true,g.hasEdge(1,2));
	    }

	    @Test
	    void testGetV() {
	        g.addNode(1);
	        g.addNode(2);
	        g.addNode(3);
			g.addNode(4);
			g.connect(1,2,7);
	        g.connect(2,3,7);
			g.connect(1,5,3);
			g.connect(1,3,5);
			g.connect(1,4,2);
			int u =g.getV(1).size();
	        assertEquals(3,u);

	    }

	    @Test
	    void removeNode() {
	        g.addNode(1);
	        g.addNode(2);
	        g.addNode(3);
	        g.connect(1,2,7);
	        g.connect(2,3,7);
			g.connect(3,4,7);
			g.connect(1,3,4);
	        g.connect(1,6,2);
	        assertEquals(3,g.nodeSize());
			assertEquals(true,g.hasEdge(1,2));
			g.removeNode(1);
	        assertEquals(2,g.nodeSize());
	        assertEquals(false,g.hasEdge(1,2));
		}

	    @Test
	    void removeEdge() {
	        g.addNode(1);
	        g.addNode(2);
	        g.addNode(3);
			g.connect(1,2,7);
			g.connect(2,3,7);
			g.connect(3,4,7);
			g.connect(1,3,4);
			g.connect(1,6,2);
	        assertTrue(g.hasEdge(1,2));
	        g.removeEdge(1,2);
	        boolean t1 = g.hasEdge(1,2);
			assertFalse(g.hasEdge(1,2));
			assertFalse(g.hasEdge(3,4));
		}

	    @Test
	    void nodeSize() {
			g.addNode(1);
	        g.addNode(2);
	        g.addNode(3);
			g.addNode(4);
			g.addNode(5);
			g.addNode(4);
	        assertEquals(5,g.nodeSize());
	    }

	    @Test
	    void edgeSize() {
			g.addNode(1);
	        g.addNode(2);
	        g.addNode(3);
			g.addNode(4);
			g.connect(1,2,7);
	        g.connect(2,3,7);
			g.connect(1,5,3);
			g.connect(1,3,5);
			g.connect(1,4,2);
	        assertEquals(4,g.edgeSize());
			 g.removeEdge(1,2);
			assertEquals(3,g.edgeSize());

		}

	    @Test
	    void getMC() {
			g.addNode(1);
	        g.addNode(2);
	        g.addNode(3);
			g.addNode(4);
			g.connect(1,2,7);
	        g.connect(2,3,7);
			g.connect(1,5,3);
			g.connect(1,3,5);
	        assertEquals(7,g.getMC());

		}

}
